generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "postgresqlExtensions", "nativeDistinct", "relationJoins"]
  binaryTargets   = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Account, Session, User and VerificationToken
// Match next-auth model https://next-auth.js.org/adapters/prisma
// Underscored names are from there too
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id") @db.Uuid
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum UserRole {
  Administrator         @map("administrator")
  Demo                  @map("demo")
  PrefectureDepartement @map("prefecture_departement")
  PrefectureRegion      @map("prefecture_region")
  User                  @map("user")

  @@map("user_role")
}

model User {
  id                         String    @id @default(uuid()) @db.Uuid
  legacyId                   Int?      @unique @map("legacy_id")
  firstName                  String?   @map("first_name")
  lastName                   String?   @map("last_name")
  name                       String?
  email                      String    @unique
  emailVerified              DateTime? @map("email_verified")
  image                      Image?    @relation(fields: [imageId], references: [id])
  imageId                    String?   @unique @map("image_id") @db.Uuid
  location                   String?
  title                      String?
  description                String?
  role                       UserRole  @default(User)
  // Scope of the user used for access control (e.g. prefects can only access their own departement, it will be their departementCode)
  roleScope                  String?   @map("role_scope")
  // If the user participates to a gouvernance form, this is the persona (commune, epci...) for the user
  gouvernancePersona         String?   @map("gouvernance_persona")
  // Track if the user has been sent a "welcome" email after a gouvernance signup
  gouvernanceSignupEmailSent DateTime? @map("gouvernance_signup_email_sent")
  accounts                   Account[]
  sessions                   Session[]

  monCompteProOrganizations Json? @map("mon_compte_pro_organizations")

  created DateTime @default(now())
  updated DateTime @default(now())

  uploads Upload[]

  organizations UserOrganization[] @relation(name: "user_organizations")

  formulaireGouvernanceId String?                @map("formulaire_gouvernance_id") @db.Uuid
  formulaireGouvernance   FormulaireGouvernance? @relation("formulaire_gouvernance_participant", fields: [formulaireGouvernanceId], references: [id])

  formulairesGouvernanceCrees FormulaireGouvernance[] @relation("formulaire_gouvernance_createur")

  gouvernancesCrees              Gouvernance[] @relation("gouvernance_createur")
  gouvernancesModifieesEnDernier Gouvernance[] @relation("gouvernance_derniere_modification_par")

  besoinsEnIngenierieFinanciereCrees             BesoinsEnIngenierieFinanciere[] @relation("besoins_ingenierie_financiere_createur")
  besoinsEnIngenierieFinanciereModifiesEnDernier BesoinsEnIngenierieFinanciere[] @relation("besoins_ingenierie_financiere_derniere_modification_par")
  demandesDeSubventionCrees                      DemandeDeSubvention[]           @relation("demande_de_subvention_createur")
  demandesDeSubventionModifieesEnDernier         DemandeDeSubvention[]           @relation("demande_de_subvention_modification_par")

  @@map("users")
}

// From MonComptePro. We store them to easily debug / Monitor who has access to what
model UserOrganization {
  monCompteProId String @id @map("mon_compte_pro_id")
  users          User[] @relation(name: "user_organizations")

  // Raw data from Mon Compte Pro
  is_collectivite_territoriale Boolean
  is_external                  Boolean
  is_service_public            Boolean
  // e.g. 'Commune de les martres sur morge - Mairie'
  label                        String
  siret                        String

  // Our data
  prefectureCheckedAt     DateTime? @map("prefecture_checked_at")
  isDepartementPrefecture String?   @map("is_departement_prefecture")

  @@map("user_organizations")
}

model VerificationToken {
  token      String   @id
  identifier String // Email or other user identifier
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// This model only allows one unique row with 'app-data' id, to store global app data
model AppData {
  id          String   @id @default("app-data")
  dataUpdated DateTime @map("data_updated") // The last time data from external sources was updated (structures, accompagnements...)

  @@map("app_data")
}

model Image {
  id       String @id @default(uuid()) @db.Uuid
  legacyId Int?   @unique @map("legacy_id")

  altText String? @map("alt_text")

  blurUrl String? @map("blur_url")

  // Original dimensions in pixel (before cropping)
  originalHeight Int? @map("original_heigth")
  originalWidth  Int? @map("original_width")

  // Relative height crop (0-1)
  cropHeight Float @default(1) @map("crop_height")
  // Relative width crop
  cropWidth  Float @default(1) @map("crop_width")
  // Relative top crop
  cropTop    Float @default(0) @map("crop_top")
  // Relative left crop
  cropLeft   Float @default(0) @map("crop_left")

  // Cropped dimensions in pixels
  height Int?
  width  Int?

  upload    Upload @relation(fields: [uploadKey], references: [key])
  uploadKey String @unique @map("upload_key")
  user      User?

  @@map("images")
}

model Upload {
  key       String  @id
  legacyKey String? @unique @map("legacy_key")
  mimeType  String  @map("mime_type")
  name      String

  // Size in bytes
  size Int?

  uploadedBy   User?   @relation(fields: [uploadedById], references: [id])
  uploadedById String? @map("uploaded_by_id") @db.Uuid

  created DateTime @default(now())

  // Is an image
  image Image?

  pieceJointeBudgetSubvention DemandeDeSubvention? @relation("piece_jointe_budget_subvention")

  @@map("uploads")
}

model Region {
  // INSEE
  code                       String                  @id
  nom                        String
  searchable                 String                  @map("searchable")
  departements               Departement[]
  formulairesGouvernance     FormulaireGouvernance[]
  gouvernancesPortees        Gouvernance[]           @relation(name: "v1_gouvernance_porteur_region")
  membresGouvernances        MembreGouvernance[]     @relation("membre_gouvernance_region")
  perimetresFeuillesDeRoutes FeuilleDeRoute[]        @relation("feuille_de_route_perimetre_region")

  @@map("regions")
}

model Epci {
  // INSEE
  code String @id

  // Des groupes de communes (e.g. EPTs) sont inclus dans un autre EPCI
  epciParentCode String? @map("epci_parent_code")
  epciParent     Epci?   @relation(name: "epci_parent", fields: [epciParentCode], references: [code])
  epcisEnfants   Epci[]  @relation(name: "epci_parent")

  nom                                 String
  searchable                          String                                 @map("searchable")
  communes                            Commune[]
  geometry                            Json?
  population                          Int
  ifn                                 IfnEpci?
  formulairesGouvernance              FormulaireGouvernance[]
  participationsFormulaireGouvernance EpciParticipantFormulaireGouvernance[]
  gouvernancesPortees                 Gouvernance[]                          @relation(name: "v1_gouvernance_porteur_epci")
  membresGouvernances                 MembreGouvernance[]                    @relation("membre_gouvernance_epci")
  perimetresFeuillesDeRoutes          PerimetreEpciFeuilleDeRoute[]          @relation("perimetre_epci_feuille_de_route")

  @@map("epcis")
}

model Departement {
  // INSEE
  code                                String                                        @id
  nom                                 String
  searchable                          String                                        @map("searchable")
  codeRegion                          String?                                       @map("code_region")
  region                              Region?                                       @relation(fields: [codeRegion], references: [code], onDelete: NoAction)
  communes                            Commune[]
  geometry                            Json
  // north east [[lat,long], southwest [lat,long]]
  bounds                              Json
  structuresCartographieNationale     StructureCartographieNationale[]
  craConseillerNumerique              CraConseillerNumeriqueParDepartement?
  coordinateursConseillerNumerique    CoordinateurConseillerNumerique[]
  formulairesGouvernance              FormulaireGouvernance[]
  participationsFormulaireGouvernance DepartementParticipantFormulaireGouvernance[]
  gouvernancesPortees                 Gouvernance[]                                 @relation(name: "v1_gouvernance_porteur_departement")
  gouvernancesRemontees               Gouvernance[]                                 @relation(name: "gouvernance_departement")
  membresGouvernances                 MembreGouvernance[]                           @relation("membre_gouvernance_departement")
  perimetresFeuillesDeRoutes          FeuilleDeRoute[]                              @relation("feuille_de_route_perimetre_departement")

  @@map("departements")
}

model Commune {
  code         String         @id
  nom          String
  searchable   String         @map("searchable")
  codesPostaux CodesPostaux[]

  codeDepartement String?      @map("code_departement")
  departement     Departement? @relation(fields: [codeDepartement], references: [code], onDelete: NoAction)

  population Int

  codeEpci String? @map("code_epci")
  epci     Epci?   @relation(fields: [codeEpci], references: [code], onDelete: NoAction)

  latitude  Float?
  longitude Float?

  geometry Json?

  structuresCartographieNationale     StructureCartographieNationale[]
  ifn                                 IfnCommune?
  formulairesGouvernance              FormulaireGouvernance[]
  participationsFormulaireGouvernance CommuneParticipanteFormulaireGouvernance[]
  membresGouvernances                 MembreGouvernance[]                        @relation("membre_gouvernance_commune")

  @@index([codeDepartement])
  @@index([codeEpci])
  @@map("communes")
}

// Explicit many to many table between Commune and CodePostal
model CodesPostaux {
  code       String
  codePostal CodePostal @relation(fields: [code], references: [code], onDelete: Cascade)

  codeCommune String  @map("code_commune")
  commune     Commune @relation(fields: [codeCommune], references: [code], onDelete: Cascade)

  @@id([code, codeCommune])
  @@map("code_postaux")
}

// Normalized for easier search with o(1) instead of string[] in Communes
model CodePostal {
  code         String         @id
  codesPostaux CodesPostaux[]

  @@map("code_postal")
}

model StructureCartographieNationale {
  id         String @id
  nom        String
  searchable String @map("searchable")
  siret      String

  type           String
  sousTypePublic String? @map("sous_type_public")

  // Bad data in, bad data out. Missing communes are frequent
  codeCommune String?  @map("code_commune")
  commune     Commune? @relation(fields: [codeCommune], references: [code], onDelete: NoAction)

  // As data is really bad, as a fallback we need to store the departement code when postal code / name has a typo and no codeCommune is found
  codeDepartement String?      @map("code_repartement")
  departement     Departement? @relation(fields: [codeDepartement], references: [code], onDelete: NoAction)

  adresse String

  // This is not clean. Only used for displaying address. Use Commune relation for strict data.
  codePostal String @map("code_postal")
  source     String

  updatedAt DateTime @map("updated_at")

  latitude  Float?
  longitude Float?

  labelConseillersNumerique Boolean @map("label_conseillers_numerique")
  labelFranceServices       Boolean @map("label_france_services")
  labelAidantsConnect       Boolean @map("label_aidants_connect")

  zrr Boolean @default(false)
  qpv Boolean @default(false)

  structureAidantsConnect StructureAidantsConnect?

  permanenceConseillerNumerique PermanenceConseillerNumerique?

  // If we have detected an error in the data (e.g. invalid postal code / commune name) we store the error here
  errors Json?

  @@map("structures_cartographie_nationale")
}

model StructureAidantsConnect {
  id String @id

  structureCartographieNationaleId String?                         @unique @map("structure_cartographie_nationale_id")
  structureCartographieNationale   StructureCartographieNationale? @relation(fields: [structureCartographieNationaleId], references: [id], onDelete: NoAction)

  isActive       Boolean @map("is_active")
  aidants        Int
  usagersUniques Int     @map("usagers_uniques")
  totalDemarches Int     @map("total_demarches")

  // Nombre de démarches (smaller names for easier data transfer)
  argent    Int
  etranger  Int
  famille   Int
  justice   Int
  loisirs   Int
  papier    Int
  social    Int
  transport Int
  travail   Int
  logement  Int

  // If we have detected an error in the data (e.g. not found in carto nationale) we store the error here
  errors Json?

  @@index([structureCartographieNationaleId])
  @@map("structures_aidants_connect")
}

model PermanenceConseillerNumerique {
  id String @id

  structureCartographieNationaleId String?                           @unique @map("structure_cartographie_nationale_id")
  structureCartographieNationale   StructureCartographieNationale?   @relation(fields: [structureCartographieNationaleId], references: [id], onDelete: NoAction)
  enPermanence                     ConseillerNumeriqueEnPermanence[]

  // If we have detected an error in the data (e.g. not found in carto nationale) we store the error here
  errors Json?

  @@index([structureCartographieNationaleId])
  @@map("permanences_conseiller_numerique")
}

// Explicit many to many table between PermanenceConseillerNumerique and ConseillerNumerique
model ConseillerNumeriqueEnPermanence {
  permanenceId String                        @map("permanence_id")
  permanence   PermanenceConseillerNumerique @relation(fields: [permanenceId], references: [id], onDelete: NoAction)

  conseillerNumeriqueId String              @map("conseiller_numerique_id")
  conseillerNumerique   ConseillerNumerique @relation(fields: [conseillerNumeriqueId], references: [id], onDelete: NoAction)

  @@id([permanenceId, conseillerNumeriqueId])
  @@index([conseillerNumeriqueId])
  @@index([permanenceId])
  @@map("conseillers_numeriques_en_permanence")
}

model CoordinateurConseillerNumerique {
  id                               String      @id
  codeDepartement                  String      @map("code_departement")
  departement                      Departement @relation(fields: [codeDepartement], references: [code], onDelete: NoAction)
  conseillersNumeriquesCoordonnees Int         @map("conseillers_numeriques_coordonnees")
  structuresCoordonnees            Int         @map("structures_coordonnees")

  @@map("coordinateur_conseiller_numerique")
}

model ConseillerNumerique {
  id String @id

  enPermanence ConseillerNumeriqueEnPermanence[]

  @@map("conseiller_numerique")
}

model CraConseillerNumeriqueParDepartement {
  codeDepartement String      @id @unique @map("code_repartement")
  departement     Departement @relation(fields: [codeDepartement], references: [code], onDelete: NoAction)

  // Nombre de participants uniques
  usagers Int

  // Nombre d'accompagnements réalisés
  accompagnements Int

  ageMoins12ans Int @map("age_moins_12_ans")
  age12a18ans   Int @map("age_12_a_18_ans")
  age18a35ans   Int @map("age_18_a_35_ans")
  age35a60ans   Int @map("age_35_a_60_ans")
  agePlus60ans  Int @map("age_plus_60_ans")

  statutEtudiant   Int @map("statut_etudiant")
  statutSansEmploi Int @map("statut_sans_emploi")
  statutEnEmploi   Int @map("statut_en_emploi")
  statutRetraite   Int @map("statut_retraite")
  statutHeterogene Int @map("statut_heterogene")

  accompagnementIndividuel  Int @map("accompagnement_individuel")
  accompagnementAtelier     Int @map("accompagnement_atelier")
  accompagnementRedirection Int @map("accompagnement_redirection")

  activiteCollectif  Int @map("activite_collectif")
  activitePonctuel   Int @map("activite_ponctuel")
  activiteIndividuel Int @map("activite_individuel")

  themeAutre                  Int @map("theme_autre")
  themeEquipementInformatique Int @map("theme_equipement_informatique")
  themeDemarcheEnLigne        Int @map("theme_demarche_en_ligne")
  themeSmartphone             Int @map("theme_smartphone")
  themeCourriel               Int @map("theme_courriel")
  themeInternet               Int @map("theme_internet")
  themeVocabulaire            Int @map("theme_vocabulaire")
  themeTraitementTexte        Int @map("theme_traitement_texte")
  themeContenusNumeriques     Int @map("theme_contenus_numeriques")
  themeTrouverEmploi          Int @map("theme_trouver_emploi")
  themeEchanger               Int @map("theme_echanger")
  themeTpePme                 Int @map("theme_tpe_pme")
  themeAccompagnerEnfant      Int @map("theme_accompagner_enfant")
  themeSecurite               Int @map("theme_securite")
  themeFraudeEtHarcelement    Int @map("theme_fraude_et_harcelement")
  themeSante                  Int @map("theme_sante")
  themeDiagnostic             Int @map("theme_diagnostic")
  themeBudget                 Int @map("theme_budget")
  themeScolaire               Int @map("theme_scolaire")

  @@map("cra_conseiller_numerique_par_departement")
}

model IfnEpci {
  codeEpci String @id @unique @map("code_epci")
  epci     Epci   @relation(fields: [codeEpci], references: [code], onDelete: NoAction)

  total Float

  // Non couverture 4G
  no4gCoverageRate Float @map("no_4g_coverage_rate")

  // Non couverture fibre
  noThdCoverageRate Float @map("no_thd_coverage_rate")

  // Taux de pauvreté
  povertyRate Float @map("poverty_rate")

  // Taux de personnes âgées de 65 ans ou plus
  older65Rate Float @map("older_65_rate")

  // Taux de personnes sans diplôme
  nscol15pRate Float @map("nscol15p_rate")

  @@map("ifn_epci")
}

model IfnCommune {
  codeCommune String  @id @unique @map("code_commune")
  commune     Commune @relation(fields: [codeCommune], references: [code], onDelete: NoAction)

  total Float

  // Non couverture 4G
  no4gCoverageRate Float @map("no_4g_coverage_rate")

  // Non couverture fibre
  noThdCoverageRate Float @map("no_thd_coverage_rate")

  // Taux de pauvreté
  povertyRate Float @map("poverty_rate")

  // Taux de personnes âgées de 65 ans ou plus
  older65Rate Float @map("older_65_rate")

  // Taux de personnes sans diplôme
  nscol15pRate Float @map("nscol15p_rate")

  @@map("ifn_commune")
}

enum IntentionFormulaireGouvernance {
  Porter     @map("porter")
  Participer @map("participer")

  @@map("intention_formulaire_gouvernance")
}

model FormulaireGouvernance {
  id String @id @default(uuid()) @db.Uuid

  gouvernancePersona String @map("gouvernance_persona")

  participants User[] @relation("formulaire_gouvernance_participant")

  createurId String @map("createur_id") @db.Uuid
  createur   User   @relation("formulaire_gouvernance_createur", fields: [createurId], references: [id])

  // Formulaire créé par un administrateur ou un compte de démonstration
  demonstration Boolean @default(false)

  modification DateTime  @updatedAt
  creation     DateTime  @default(now())
  annulation   DateTime?

  intention IntentionFormulaireGouvernance? @map("intention")

  // Pour un formulaire avec l'intention "porter" une feuille de route, on conserve les timestamp de validation de chaque étapes :
  // Etape 1
  etapeInformationsParticipant DateTime? @map("etape_informations_participant")
  // Etape 2
  etapePerimetre               DateTime? @map("etape_perimetre")
  // Etape 3
  etapeContacts                DateTime? @map("etape_contacts")
  // Etape 4
  etapeStructures              DateTime? @map("etape_structures")
  // L'étape 5 est l'envoi du formulaire
  // Cette étape est commune avec les formulaire avec l'intention "participer"
  confirmeEtEnvoye             DateTime? @map("confirme_et_envoye")

  // Formulaire renseigné par un Conseil régional
  regionCode String? @map("region_code")
  region     Region? @relation(fields: [regionCode], references: [code], onDelete: NoAction)

  // Formulaire renseigné par un EPCI
  epciCode String? @map("epci_code")
  epci     Epci?   @relation(fields: [epciCode], references: [code], onDelete: NoAction)

  // Departement de la structure qui a renseigné le formulaire
  // OU Formulaire renseigné par un conseil departemental
  departementCode String?      @map("departement_code")
  departement     Departement? @relation(fields: [departementCode], references: [code], onDelete: NoAction)

  // Formulaire renseigné par une commune
  communeCode String?  @map("commune_code")
  commune     Commune? @relation(fields: [communeCode], references: [code], onDelete: NoAction)

  // Informations sur la structure qui a renseigné le formulaire
  // Présent lorsque le formulaire est renseigné par une structure
  nomStructure   String? @map("nom_structure")
  siretStructure String? @map("siret_structure")

  // Texte libre
  // "Êtes vous impliqués dans un schéma ou une gouvernance locale relative à l'inclusion numérique ? Si oui laquelle (SDUN, CRTE, etc.)"
  schemaOuGouvernanceLocale String? @map("schema_ou_gouvernance_locale")

  // Contact lié à la structure qui a renseigné le formulaire
  contactStructureId String?                       @unique @map("contact_structure_id") @db.Uuid
  contactStructure   ContactFormulaireGouvernance? @relation(name: "formulaire_contact_structure", fields: [contactStructureId], references: [id])

  // Contact politique lié à la collectivité qui a renseigné le formulaire
  contactPolitiqueId String?                       @unique @map("contact_politique_id") @db.Uuid
  contactPolitique   ContactFormulaireGouvernance? @relation(name: "formulaire_contact_politique", fields: [contactPolitiqueId], references: [id])

  // Contact technique lié à la collectivité qui a renseigné le formulaire
  contactTechniqueId String?                       @unique @map("contact_technique_id") @db.Uuid
  contactTechnique   ContactFormulaireGouvernance? @relation(name: "formulaire_contact_technique", fields: [contactTechniqueId], references: [id])

  // Ensemble des contacts renseignés ci-dessus
  contacts ContactFormulaireGouvernance[]

  // Collectivités et structures participantes (intention "porter" une feuille de route)
  departementsParticipants DepartementParticipantFormulaireGouvernance[]
  epcisParticipantes       EpciParticipantFormulaireGouvernance[]
  communesParticipantes    CommuneParticipanteFormulaireGouvernance[]
  structuresParticipantes  StructureParticipanteFormulaireGouvernance[]

  membresGouvernance MembreGouvernance[]

  @@map("formulaire_gouvernance")
}

model ContactFormulaireGouvernance {
  id String @id @default(uuid()) @db.Uuid

  formulaireGouvernanceId String                @map("formulaire_gouvernance_id") @db.Uuid
  formulaireGouvernance   FormulaireGouvernance @relation(fields: [formulaireGouvernanceId], references: [id], onDelete: Cascade)

  nom      String
  prenom   String
  fonction String
  email    String

  contactTechnique              FormulaireGouvernance?                       @relation(name: "formulaire_contact_structure")
  contactPolitique              FormulaireGouvernance?                       @relation(name: "formulaire_contact_politique")
  contactStructure              FormulaireGouvernance?                       @relation(name: "formulaire_contact_technique")
  contactDepartementParticipant DepartementParticipantFormulaireGouvernance? @relation(name: "formulaire_contact_departement_participante")
  contactEpciParticipant        EpciParticipantFormulaireGouvernance?        @relation(name: "formulaire_contact_epci_participante")
  contactCommuneParticipante    CommuneParticipanteFormulaireGouvernance?    @relation(name: "formulaire_contact_commune_participante")
  contactStructureParticipante  StructureParticipanteFormulaireGouvernance?  @relation(name: "formulaire_contact_structure_participante")

  @@map("contact_formulaire_gouvernance")
}

model DepartementParticipantFormulaireGouvernance {
  id String @id @default(uuid()) @db.Uuid

  horsTerritoire Boolean @default(false) @map("hors_territoire")

  formulaireGouvernanceId String                @map("formulaire_gouvernance_id") @db.Uuid
  formulaireGouvernance   FormulaireGouvernance @relation(fields: [formulaireGouvernanceId], references: [id], onDelete: Cascade)

  departementCode String      @map("departement_code")
  departement     Departement @relation(fields: [departementCode], references: [code], onDelete: NoAction)

  contactId String?                       @unique @map("contact_id") @db.Uuid
  contact   ContactFormulaireGouvernance? @relation(name: "formulaire_contact_departement_participante", fields: [contactId], references: [id])

  @@map("departement_participant_formulaire_gouvernance")
}

model EpciParticipantFormulaireGouvernance {
  id String @id @default(uuid()) @db.Uuid

  horsTerritoire Boolean @default(false) @map("hors_territoire")

  formulaireGouvernanceId String                @map("formulaire_gouvernance_id") @db.Uuid
  formulaireGouvernance   FormulaireGouvernance @relation(fields: [formulaireGouvernanceId], references: [id], onDelete: Cascade)

  epciCode String @map("epci_code")
  epci     Epci   @relation(fields: [epciCode], references: [code], onDelete: NoAction)

  contactId String?                       @unique @map("contact_id") @db.Uuid
  contact   ContactFormulaireGouvernance? @relation(name: "formulaire_contact_epci_participante", fields: [contactId], references: [id])

  @@map("epci_participante_formulaire_gouvernance")
}

model CommuneParticipanteFormulaireGouvernance {
  id String @id @default(uuid()) @db.Uuid

  horsTerritoire Boolean @default(false) @map("hors_territoire")

  formulaireGouvernanceId String                @map("formulaire_gouvernance_id") @db.Uuid
  formulaireGouvernance   FormulaireGouvernance @relation(fields: [formulaireGouvernanceId], references: [id], onDelete: Cascade)

  communeCode String  @map("commune_code")
  commune     Commune @relation(fields: [communeCode], references: [code], onDelete: NoAction)

  contactId String?                       @unique @map("contact_id") @db.Uuid
  contact   ContactFormulaireGouvernance? @relation(name: "formulaire_contact_commune_participante", fields: [contactId], references: [id])

  @@map("commune_participante_formulaire_gouvernance")
}

model StructureParticipanteFormulaireGouvernance {
  id String @id @default(uuid()) @db.Uuid

  formulaireGouvernanceId String                @map("formulaire_gouvernance_id") @db.Uuid
  formulaireGouvernance   FormulaireGouvernance @relation(fields: [formulaireGouvernanceId], references: [id], onDelete: Cascade)

  nomStructure String @map("nom_structure")

  contactId String?                       @unique @map("contact_id") @db.Uuid
  contact   ContactFormulaireGouvernance? @relation(name: "formulaire_contact_structure_participante", fields: [contactId], references: [id])

  @@map("structure_participante_formulaire_gouvernance")
}

enum PerimetreGouvernance {
  epci
  departement
  region
  autre

  @@map("perimetre_gouvernance")
}

model Gouvernance {
  id String @id @default(uuid()) @db.Uuid

  createurId String @map("createur_id") @db.Uuid
  createur   User   @relation("gouvernance_createur", fields: [createurId], references: [id])

  derniereModificationParId String @map("derniere_modification_par_id") @db.Uuid
  derniereModificationPar   User   @relation("gouvernance_derniere_modification_par", fields: [derniereModificationParId], references: [id])

  modification DateTime  @updatedAt
  creation     DateTime  @default(now())
  supression   DateTime?

  // Département qui a créé la gouvernance
  departement     Departement @relation(name: "gouvernance_departement", fields: [departementCode], references: [code])
  departementCode String      @map("departement_code")

  // V1 Fields applied to "Gouvernance préssentie" Gouvernance version
  // We keep them to have good default values for v2, and for safety in case we need to rollback or dig in old data
  v1Perimetre PerimetreGouvernance? @map("v1_perimetre")

  v1PorteurRegionCode String? @map("v1_porteur_region_code")
  v1PorteurRegion     Region? @relation(name: "v1_gouvernance_porteur_region", fields: [v1PorteurRegionCode], references: [code], onDelete: NoAction)

  v1PorteurDepartementCode String?      @map("v1_porteur_departement_code")
  v1PorteurDepartement     Departement? @relation(name: "v1_gouvernance_porteur_departement", fields: [v1PorteurDepartementCode], references: [code], onDelete: NoAction)

  v1PorteurEpciCode String? @map("v1_porteur_epci_code")
  v1PorteurEpci     Epci?   @relation(name: "v1_gouvernance_porteur_epci", fields: [v1PorteurEpciCode], references: [code], onDelete: NoAction)

  v1PorteurSiret             String?            @map("v1_porteur_siret")
  v1PorteurSiretInformations InformationsSiret? @relation(fields: [v1PorteurSiret], references: [siret], onDelete: NoAction)

  // V2 Fields

  v2Enregistree DateTime? @map("v2_enregistree")

  sousPrefetReferentPrenom String? @map("sous_prefet_referent_prenom")
  sousPrefetReferentNom    String? @map("sous_prefet_referent_nom")
  sousPrefetReferentEmail  String? @map("sous_prefet_referent_email")

  noteDeContexte                        String                                @map("note_de_contexte")
  organisationsRecruteusesCoordinateurs OrganisationRecruteuseCoordinateurs[]

  noteDeContexteSubventions            String?   @map("note_de_contexte_subventions")
  noteDeContexteSubventionsEnregistree DateTime? @map("note_de_contexte_subventions_enregistree")

  pasDeCoporteurs Boolean? @map("pas_de_co_porteurs")

  feuillesDeRoute FeuilleDeRoute[]

  membres MembreGouvernance[]

  comites ComiteGouvernance[]

  besoinsEnIngenierieFinanciereId String?                        @unique @map("besoins_en_ingenierie_financiere_id") @db.Uuid
  besoinsEnIngenierieFinanciere   BesoinsEnIngenierieFinanciere? @relation(fields: [besoinsEnIngenierieFinanciereId], references: [id])

  @@map("gouvernances")
}

enum BesoinSubvention {
  FaireUnDiagnosticTerritorial @map("faire_un_diagnostic_territorial")

  @@map("besoin_subvention")
}

// Une Demande de subvention en rapport avec une feuille de route, financée par le porteur et/ou des subventions
model DemandeDeSubvention {
  id String @id @default(uuid()) @db.Uuid

  besoins BesoinSubvention[]

  creation                  DateTime @default(now())
  modification              DateTime @updatedAt
  createurId                String   @map("createur_id") @db.Uuid
  createur                  User     @relation("demande_de_subvention_createur", fields: [createurId], references: [id])
  derniereModificationParId String   @map("derniere_modification_par_id") @db.Uuid
  derniereModificationPar   User     @relation("demande_de_subvention_modification_par", fields: [derniereModificationParId], references: [id])

  // La demande n'est plus modifiable après validation
  valideeEtEnvoyee      DateTime? @map("validee_et_envoyee")
  demandeDeModification DateTime? @map("demande_de_modification")
  rejetee               DateTime?
  acceptee              DateTime?

  feuilleDeRouteId String         @map("feuille_de_route_id") @db.Uuid
  feuilleDeRoute   FeuilleDeRoute @relation(fields: [feuilleDeRouteId], references: [id])

  nomAction   String @map("nom_action")
  contexte    String
  description String

  budgetGlobal         Decimal @map("budget_global") @db.Decimal(10, 2)
  pieceJointeBudgetKey String? @unique @map("piece_jointe_budget_key")
  pieceJointeBudget    Upload? @relation(name: "piece_jointe_budget_subvention", fields: [pieceJointeBudgetKey], references: [key])

  subventionDemandee   Decimal  @map("subvention_demandee") @db.Decimal(10, 2)
  subventionEtp        Decimal? @map("subvention_etp") @db.Decimal(10, 2)
  subventionPrestation Decimal? @map("subvention_prestation") @db.Decimal(10, 2)

  beneficiaires BeneficiaireSubvention[]

  @@map("demande_de_subvention")
}

model BeneficiaireSubvention {
  id String @id @default(uuid()) @db.Uuid

  demandeDeSubventionId String              @map("demande_de_subvention_id") @db.Uuid
  demandeDeSubvention   DemandeDeSubvention @relation(fields: [demandeDeSubventionId], references: [id])

  membreGouvernanceId String            @map("membre_gouvernance_id") @db.Uuid
  membreGouvernance   MembreGouvernance @relation(fields: [membreGouvernanceId], references: [id])

  subvention Decimal @db.Decimal(10, 2)

  @@map("beneficiaire_subvention")
}

model BesoinsEnIngenierieFinanciere {
  id String @id @default(uuid()) @db.Uuid

  gouvernance Gouvernance?

  createurId String @map("createur_id") @db.Uuid
  createur   User   @relation("besoins_ingenierie_financiere_createur", fields: [createurId], references: [id])

  derniereModificationParId String @map("derniere_modification_par_id") @db.Uuid
  derniereModificationPar   User   @relation("besoins_ingenierie_financiere_derniere_modification_par", fields: [derniereModificationParId], references: [id])

  modification            DateTime  @updatedAt
  creation                DateTime  @default(now())
  supression              DateTime?
  texteIntroductionLu     DateTime? @map("texte_introduction_lu")
  selectionEnregistree    DateTime? @map("selection_enregistree")
  priorisationEnregistree DateTime? @map("priorisation_enregistree")

  // Formaliser la feuille de route

  faireUnDiagnosticTerritorial                   Boolean @default(false) @map("faire_un_diagnostic_territorial")
  faireUnDiagnosticTerritorialEtp                Float?  @map("faire_un_diagnostic_territorial_etp")
  faireUnDiagnosticTerritorialPrestation         Boolean @default(false) @map("faire_un_diagnostic_territorial_prestation")
  faireUnDiagnosticTerritorialPrestationPriorite Int?    @map("faire_un_diagnostic_territorial_prestation_priorite")

  coConstruireLaFeuilleDeRoute                   Boolean @default(false) @map("co_construire_la_feuille_de_route")
  coConstruireLaFeuilleDeRouteEtp                Float?  @map("co_construire_la_feuille_de_route_etp")
  coConstruireLaFeuilleDeRoutePrestation         Boolean @default(false) @map("co_construire_la_feuille_de_route_prestation")
  coConstruireLaFeuilleDeRoutePrestationPriorite Int?    @map("co_construire_la_feuille_de_route_prestation_priorite")

  redigerLaFeuilleDeRoute                   Boolean @default(false) @map("rediger_la_feuille_de_route")
  redigerLaFeuilleDeRouteEtp                Float?  @map("rediger_la_feuille_de_route_etp")
  redigerLaFeuilleDeRoutePrestation         Boolean @default(false) @map("rediger_la_feuille_de_route_prestation")
  redigerLaFeuilleDeRoutePrestationPriorite Int?    @map("rediger_la_feuille_de_route_prestation_priorite")

  creerUnVehiculeJuridique                   Boolean @default(false) @map("creer_un_vehicule_juridique")
  creerUnVehiculeJuridiqueEtp                Float?  @map("creer_un_vehicule_juridique_etp")
  creerUnVehiculeJuridiquePrestation         Boolean @default(false) @map("creer_un_vehicule_juridique_prestation")
  creerUnVehiculeJuridiquePrestationPriorite Int?    @map("creer_un_vehicule_juridique_prestation_priorite")

  formaliserLaFeuilleDeRouteAutre                   Boolean @default(false) @map("formaliser_la_feuille_de_route_autre")
  formaliserLaFeuilleDeRouteAutrePrecisions         String? @map("formaliser_la_feuille_de_route_autre_precisions")
  formaliserLaFeuilleDeRouteAutreEtp                Float?  @map("formaliser_la_feuille_de_route_autre_etp")
  formaliserLaFeuilleDeRouteAutrePrestation         Boolean @default(false) @map("formaliser_la_feuille_de_route_autre_prestation")
  formaliserLaFeuilleDeRouteAutrePrestationPriorite Int?    @map("formaliser_la_feuille_de_route_autre_prestation_priorite")

  // Financer le déploiement de la feuille de route

  structurerUnFondsLocal                   Boolean @default(false) @map("structurer_un_fonds_local")
  structurerUnFondsLocalEtp                Float?  @map("structurer_un_fonds_local_etp")
  structurerUnFondsLocalPrestation         Boolean @default(false) @map("structurer_un_fonds_local_prestation")
  structurerUnFondsLocalPrestationPriorite Int?    @map("structurer_un_fonds_local_prestation_priorite")

  monterDesDossiersDeSubvention                   Boolean @default(false) @map("monter_des_dossiers_de_subvention")
  monterDesDossiersDeSubventionEtp                Float?  @map("monter_des_dossiers_de_subvention_etp")
  monterDesDossiersDeSubventionPrestation         Boolean @default(false) @map("monter_des_dossiers_de_subvention_prestation")
  monterDesDossiersDeSubventionPrestationPriorite Int?    @map("monter_des_dossiers_de_subvention_prestation_priorite")

  animerEtMettreEnOeuvre                   Boolean @default(false) @map("animer_et_mettre_en_oeuvre")
  animerEtMettreEnOeuvreEtp                Float?  @map("animer_et_mettre_en_oeuvre_etp")
  animerEtMettreEnOeuvrePrestation         Boolean @default(false) @map("animer_et_mettre_en_oeuvre_prestation")
  animerEtMettreEnOeuvrePrestationPriorite Int?    @map("animer_et_mettre_en_oeuvre_prestation_priorite")

  financerLeDeploiementAutre                   Boolean @default(false) @map("financer_le_deploiement_autre")
  financerLeDeploiementAutrePrecisions         String? @map("financer_le_deploiement_autre_precisions")
  financerLeDeploiementAutreEtp                Float?  @map("financer_le_deploiement_autre_etp")
  financerLeDeploiementAutrePrestation         Boolean @default(false) @map("financer_le_deploiement_autre_prestation")
  financerLeDeploiementAutrePrestationPriorite Int?    @map("financer_le_deploiement_autre_prestation_priorite")

  // Outiller les acteurs du territoire

  structurerUneFiliereDeReconditionnement                   Boolean @default(false) @map("structurer_une_filiere_de_reconditionnement")
  structurerUneFiliereDeReconditionnementEtp                Float?  @map("structurer_une_filiere_de_reconditionnement_etp")
  structurerUneFiliereDeReconditionnementPrestation         Boolean @default(false) @map("structurer_une_filiere_de_reconditionnement_prestation")
  structurerUneFiliereDeReconditionnementPrestationPriorite Int?    @map("structurer_une_filiere_de_reconditionnement_prestation_priorite")

  collecterDesDonneesTerritoriales                   Boolean @default(false) @map("collecter_des_donnees_territoriales")
  collecterDesDonneesTerritorialesEtp                Float?  @map("collecter_des_donnees_territoriales_etp")
  collecterDesDonneesTerritorialesPrestation         Boolean @default(false) @map("collecter_des_donnees_territoriales_prestation")
  collecterDesDonneesTerritorialesPrestationPriorite Int?    @map("collecter_des_donnees_territoriales_prestation_priorite")

  sensibiliserLesActeurs                   Boolean @default(false) @map("sensibiliser_les_acteurs")
  sensibiliserLesActeursEtp                Float?  @map("sensibiliser_les_acteurs_etp")
  sensibiliserLesActeursPrestation         Boolean @default(false) @map("sensibiliser_les_acteurs_prestation")
  sensibiliserLesActeursPrestationPriorite Int?    @map("sensibiliser_les_acteurs_prestation_priorite")

  outillerLesActeursAutre                   Boolean @default(false) @map("outiller_les_acteurs_autre")
  outillerLesActeursAutrePrecisions         String? @map("outiller_les_acteurs_autre_precisions")
  outillerLesActeursAutreEtp                Float?  @map("outiller_les_acteurs_autre_etp")
  outillerLesActeursAutrePrestation         Boolean @default(false) @map("outiller_les_acteurs_autre_prestation")
  outillerLesActeursAutrePrestationPriorite Int?    @map("outiller_les_acteurs_autre_prestation_priorite")

  // Former les professionnels à l’inclusion numérique

  formerLesAgentsPublics         Boolean @default(false) @map("former_les_agents_publics")
  formerLesAgentsPublicsNombre   Float?  @map("former_les_agents_publics_nombre")
  formerLesAgentsPublicsPriorite Int?    @map("former_les_agents_publics_priorite")

  formerLesSalariesAssociatifs         Boolean @default(false) @map("former_les_salaries_associatifs")
  formerLesSalariesAssociatifsNombre   Float?  @map("former_les_salaries_associatifs_nombre")
  formerLesSalariesAssociatifsPriorite Int?    @map("former_les_salaries_associatifs_priorite")

  appuyerLaCertificationQualiopi         Boolean @default(false) @map("appuyer_la_certification_qualiopi")
  appuyerLaCertificationQualiopiPriorite Int?    @map("appuyer_la_certification_qualiopi_priorite")

  formerLesProfessionnelsAutre           Boolean @default(false) @map("former_les_professionnels_autre")
  formerLesProfessionnelsAutrePrecisions String? @map("former_les_professionnels_autre_precisions")
  formerLesProfessionnelsAutrePriorite   Int?    @map("former_les_professionnels_autre_priorite")

  totalEtp         Float @map("total_etp")
  totalEtpPriorite Int?  @map("total_etp_priorite")

  @@map("besoins_en_ingenierie_financiere")
}

// Tous les participants à une gouvernance
model MembreGouvernance {
  id String @id @default(uuid()) @db.Uuid

  gouvernanceId String      @map("gouvernance_id") @db.Uuid
  gouvernance   Gouvernance @relation(fields: [gouvernanceId], references: [id], onDelete: Cascade)

  // Ce membre est coporteur de la gouvernance
  coporteur Boolean @default(false)

  modification DateTime @updatedAt
  creation     DateTime @default(now())

  regionCode String? @map("region_code")
  region     Region? @relation(name: "membre_gouvernance_region", fields: [regionCode], references: [code], onDelete: NoAction)

  departementCode String?      @map("departement_code")
  departement     Departement? @relation(name: "membre_gouvernance_departement", fields: [departementCode], references: [code], onDelete: NoAction)

  communeCode String?  @map("commune_code")
  commune     Commune? @relation(name: "membre_gouvernance_commune", fields: [communeCode], references: [code], onDelete: NoAction)

  epciCode String? @map("epci_code")
  epci     Epci?   @relation(name: "membre_gouvernance_epci", fields: [epciCode], references: [code], onDelete: NoAction)

  nomStructure String? @map("nom_structure")

  siret             String?            @map("siret")
  siretInformations InformationsSiret? @relation(name: "membre_gouvernance_siret", fields: [siret], references: [siret], onDelete: NoAction)

  // Formulaire rempli par le porteur, surtout utile en cas de membre de type structure car une structure n'est pas modélisée en base
  formulaireGouvernanceId String                   @map("formulaire_gouvernance_id") @db.Uuid
  formulaireGouvernance   FormulaireGouvernance    @relation(fields: [formulaireGouvernanceId], references: [id], onDelete: Cascade)
  feuillesDeRoutes        MembreFeuilleDeRoute[]
  beneficiaireSubventions BeneficiaireSubvention[]

  @@map("membre_gouvernance")
}

enum TypeContrat {
  Crte    @map("crte")
  Sdaasap @map("sdaasap")
  Sdin    @map("sdin")
  Sdun    @map("sdun")
  Autre   @map("autre")

  @@map("type_contrat")
}

enum RoleMembreFeuilleDeRoute {
  Porteur @map("porteur")

  @@map("role_membre_feuille_de_route")
}

model MembreFeuilleDeRoute {
  id String @id @default(uuid()) @db.Uuid

  modification DateTime @default(now()) @updatedAt
  creation     DateTime @default(now())

  feuilleDeRouteId String         @map("feuille_de_route_id") @db.Uuid
  feuilleDeRoute   FeuilleDeRoute @relation(fields: [feuilleDeRouteId], references: [id], onDelete: Cascade)

  membreId String            @map("membre_id") @db.Uuid
  membre   MembreGouvernance @relation(fields: [membreId], references: [id], onDelete: NoAction)

  role RoleMembreFeuilleDeRoute

  @@unique([feuilleDeRouteId, membreId])
  @@map("membre_feuille_de_route")
}

model FeuilleDeRoute {
  id String @id @default(uuid()) @db.Uuid

  gouvernanceId String      @map("gouvernance_id") @db.Uuid
  gouvernance   Gouvernance @relation(fields: [gouvernanceId], references: [id], onDelete: Cascade)

  modification DateTime @updatedAt
  creation     DateTime @default(now())

  nom String

  contratPreexistant          Boolean      @default(false) @map("contrat_preexistant")
  typeContrat                 TypeContrat? @map("type_contrat")
  typeContratAutreDescription String?      @map("type_contrat_autre_description")

  membres MembreFeuilleDeRoute[]

  // Périmètre peut etre region, departement, ou PLUSIEURS Epcis
  perimetreRegionCode String? @map("perimetre_region_code")
  perimetreRegion     Region? @relation(name: "feuille_de_route_perimetre_region", fields: [perimetreRegionCode], references: [code], onDelete: NoAction)

  perimetreDepartementCode String?      @map("perimetre_departement_code")
  perimetreDepartement     Departement? @relation(name: "feuille_de_route_perimetre_departement", fields: [perimetreDepartementCode], references: [code], onDelete: NoAction)

  perimetreEpcis       PerimetreEpciFeuilleDeRoute[]
  demandesDeSubvention DemandeDeSubvention[]

  @@map("feuille_de_route")
}

model PerimetreEpciFeuilleDeRoute {
  id String @id @default(uuid()) @db.Uuid

  feuilleDeRouteId String         @map("feuille_de_route_id") @db.Uuid
  feuilleDeRoute   FeuilleDeRoute @relation(fields: [feuilleDeRouteId], references: [id], onDelete: Cascade)

  epciCode String @map("epci_code")
  epci     Epci   @relation(name: "perimetre_epci_feuille_de_route", fields: [epciCode], references: [code], onDelete: NoAction)

  @@unique([feuilleDeRouteId, epciCode])
  @@map("perimetre_epci_feuille_de_route")
}

enum TypeComite {
  Strategique @map("strategique")
  Technique   @map("technique")
  Consultatif @map("consultatif")
  Autre       @map("autre")

  @@map("type_comite")
}

enum FrequenceComite {
  Mensuelle     @map("mensuelle")
  Trimestrielle @map("trimestrielle")
  Semestrielle  @map("semestrielle")
  Annuelle      @map("annuelle")
  Autre         @map("autre")

  @@map("frequence_comite")
}

model ComiteGouvernance {
  id String @id @default(uuid()) @db.Uuid

  gouvernanceId String      @map("gouvernance_id") @db.Uuid
  gouvernance   Gouvernance @relation(fields: [gouvernanceId], references: [id], onDelete: Cascade)

  modification DateTime @updatedAt
  creation     DateTime @default(now())

  type                TypeComite @map("type")
  typeAutrePrecisions String?    @map("type_autre_precisions")

  frequence FrequenceComite @map("frequence")

  commentaire String?

  @@map("comite_gouvernance")
}

model OrganisationRecruteuseCoordinateurs {
  id String @id @default(uuid()) @db.Uuid

  modification DateTime @default(now()) @updatedAt
  creation     DateTime @default(now())

  gouvernanceId String      @map("gouvernance_id") @db.Uuid
  gouvernance   Gouvernance @relation(fields: [gouvernanceId], references: [id], onDelete: Cascade)

  siret             String            @map("siret")
  siretInformations InformationsSiret @relation(fields: [siret], references: [siret], onDelete: NoAction)

  @@map("organisations_recruteuses_coordinateurs")
}

enum InformationSiretStatus {
  Pending @map("pending")
  Valid   @map("valid")
  Invalid @map("invalid")

  @@map("information_siret_status")
}

model InformationsSiret {
  siret String @id

  // Raison sociale / Nom renseigné par l'utilisateur AVANT vérification
  nom String?

  modification DateTime @default(now()) @updatedAt
  creation     DateTime @default(now())

  // Informations récupérées depuis l'API Entreprise
  status                         InformationSiretStatus @default(Pending)
  verification                   DateTime?
  erreurVerification             String?                @map("erreur_verification")
  siren                          String?
  activitePrincipaleCode         String?                @map("activite_principale_code")
  activitePrincipaleLibelle      String?                @map("activite_principale_libelle")
  activitePrincipaleNomenclature String?                @map("activite_principale_nomenclature")
  formeJuridiqueCode             String?                @map("forme_juridique_code")
  formeJuridiqueLibelle          String?                @map("forme_juridique_libelle")

  gouvernancesPortees                   Gouvernance[]
  organisationsRecruteusesCoordinateurs OrganisationRecruteuseCoordinateurs[]
  membresGouvernances                   MembreGouvernance[]                   @relation("membre_gouvernance_siret")

  @@map("informations_siret")
}
