generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "jsonProtocol", "postgresqlExtensions", "extendedIndexes"]
  binaryTargets   = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Account, Session, User and VerificationToken
// Match next-auth model https://next-auth.js.org/adapters/prisma
// Underscored names are from there too
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id") @db.Uuid
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum UserRole {
  Administrator
  Demo
  PrefectureDepartement
  PrefectureRegion
  User
}

model User {
  id                         String    @id @default(uuid()) @db.Uuid
  legacyId                   Int?      @unique @map("legacy_id")
  firstName                  String?   @map("first_name")
  lastName                   String?   @map("last_name")
  name                       String?
  email                      String    @unique
  emailVerified              DateTime? @map("email_verified")
  image                      Image?    @relation(fields: [imageId], references: [id])
  imageId                    String?   @unique @map("image_id") @db.Uuid
  location                   String?
  title                      String?
  description                String?
  role                       UserRole  @default(User)
  // Scope of the user used for access control (e.g. prefects can only access their own departement, it will be their departementCode)
  roleScope                  String?   @map("role_scope")
  // If the user participates to a gouvernance form, this is the persona (commune, epci...) for the user
  gouvernancePersona         String?   @map("gouvernance_persona")
  // Track if the user has been sent a "welcome" email after a gouvernance signup
  gouvernanceSignupEmailSent DateTime? @map("gouvernance_signup_email_sent")
  accounts                   Account[]
  sessions                   Session[]

  monCompteProOrganizations Json? @map("mon_compte_pro_organizations")

  created DateTime @default(now())
  updated DateTime @default(now())

  uploads Upload[]

  organizations UserOrganization[] @relation(name: "user_organizations")

  formulaireGouvernanceId String?                @map("formulaire_gouvernance_id") @db.Uuid
  formulaireGouvernance   FormulaireGouvernance? @relation("formulaire_gouvernance_participant", fields: [formulaireGouvernanceId], references: [id])

  formulairesGouvernanceCrees FormulaireGouvernance[] @relation("formulaire_gouvernance_createur")

  @@map("users")
}

// From MonComptePro. We store them to easily debug / Monitor who has access to what
model UserOrganization {
  monCompteProId String @id @map("mon_compte_pro_id")
  users          User[] @relation(name: "user_organizations")

  // Raw data from Mon Compte Pro
  is_collectivite_territoriale Boolean
  is_external                  Boolean
  is_service_public            Boolean
  // e.g. 'Commune de les martres sur morge - Mairie'
  label                        String
  siret                        String

  // Our data
  prefectureCheckedAt     DateTime? @map("prefecture_checked_at")
  isDepartementPrefecture String?   @map("is_departement_prefecture")

  @@map("user_organizations")
}

model VerificationToken {
  token      String   @id
  identifier String // Email or other user identifier
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Image {
  id       String @id @default(uuid()) @db.Uuid
  legacyId Int?   @unique @map("legacy_id")

  altText String? @map("alt_text")

  blurUrl String? @map("blur_url")

  // Original dimensions in pixel (before cropping)
  originalHeight Int? @map("original_heigth")
  originalWidth  Int? @map("original_width")

  // Relative height crop (0-1)
  cropHeight Float @default(1) @map("crop_height")
  // Relative width crop
  cropWidth  Float @default(1) @map("crop_width")
  // Relative top crop
  cropTop    Float @default(0) @map("crop_top")
  // Relative left crop
  cropLeft   Float @default(0) @map("crop_left")

  // Cropped dimensions in pixels
  height Int?
  width  Int?

  upload    Upload @relation(fields: [uploadKey], references: [key])
  uploadKey String @unique @map("upload_key")
  user      User?

  @@map("images")
}

model Upload {
  key       String  @id
  legacyKey String? @unique @map("legacy_key")
  mimeType  String  @map("mime_type")
  name      String

  // Size in bytes
  size Int?

  uploadedBy   User?   @relation(fields: [uploadedById], references: [id])
  uploadedById String? @map("uploaded_by_id") @db.Uuid

  created DateTime @default(now())

  // Is an image
  image Image?

  @@map("uploads")
}

model Region {
  // INSEE
  code         String        @id
  nom          String
  departements Departement[]

  @@map("regions")
}

model Epci {
  // INSEE
  code       String    @id
  nom        String
  communes   Commune[]
  geometry   Json?
  population Int
  ifn        IfnEpci?

  @@map("epcis")
}

model Departement {
  // INSEE
  code                             String                                @id
  nom                              String
  codeRegion                       String?                               @map("code_region")
  region                           Region?                               @relation(fields: [codeRegion], references: [code])
  communes                         Commune[]
  geometry                         Json
  // north east [[lat,long], southwest [lat,long]]
  bounds                           Json
  structuresCartographieNationale  StructureCartographieNationale[]
  craConseillerNumerique           CraConseillerNumeriqueParDepartement?
  coordinateursConseillerNumerique CoordinateurConseillerNumerique[]

  @@map("departements")
}

model Commune {
  code         String         @id
  nom          String
  codesPostaux CodesPostaux[]

  codeDepartement String?      @map("code_departement")
  departement     Departement? @relation(fields: [codeDepartement], references: [code])

  population Int

  codeEpci String? @map("code_epci")
  epci     Epci?   @relation(fields: [codeEpci], references: [code])

  latitude  Float?
  longitude Float?

  geometry Json?

  structuresCartographieNationale StructureCartographieNationale[]
  ifn                             IfnCommune?

  @@index([codeDepartement])
  @@index([codeEpci])
  @@map("communes")
}

// Explicit many to many table between Commune and CodePostal
model CodesPostaux {
  code       String
  codePostal CodePostal @relation(fields: [code], references: [code])

  codeCommune String  @map("code_commune")
  commune     Commune @relation(fields: [codeCommune], references: [code], onDelete: Cascade)

  @@id([code, codeCommune])
  @@map("code_postaux")
}

// Normalized for easier search with o(1) instead of string[] in Communes
model CodePostal {
  code         String         @id
  codesPostaux CodesPostaux[]

  @@map("code_postal")
}

model StructureCartographieNationale {
  id    String @id
  nom   String
  siret String

  type           String
  sousTypePublic String?

  // Bad data in, bad data out. Missing communes are frequent
  codeCommune String?  @map("code_commune")
  commune     Commune? @relation(fields: [codeCommune], references: [code])

  // As data is really bad, as a fallback we need to store the departement code when postal code / name has a typo and no codeCommune is found
  codeDepartement String?      @map("code_repartement")
  departement     Departement? @relation(fields: [codeDepartement], references: [code])

  adresse String

  // This is not clean. Only used for displaying address. Use Commune relation for strict data.
  codePostal String @map("code_postal")
  source     String

  updatedAt DateTime @map("updated_at")

  latitude  Float?
  longitude Float?

  labelConseillersNumerique Boolean
  labelFranceServices       Boolean
  labelAidantsConnect       Boolean

  zrr Boolean @default(false)
  qpv Boolean @default(false)

  structureAidantsConnect StructureAidantsConnect?

  permanenceConseillerNumerique PermanenceConseillerNumerique?

  // If we have detected an error in the data (e.g. invalid postal code / commune name) we store the error here
  errors Json?

  @@map("structures_cartographie_nationale")
}

model StructureAidantsConnect {
  id String @id

  structureCartographieNationaleId String?                         @unique @map("structure_cartographie_nationale_id")
  structureCartographieNationale   StructureCartographieNationale? @relation(fields: [structureCartographieNationaleId], references: [id])

  isActive Boolean

  aidants        Int
  usagersUniques Int

  totalDemarches Int

  // Nombre de d√©marches (smaller names for easier data transfer)
  argent    Int
  etranger  Int
  famille   Int
  justice   Int
  loisirs   Int
  papier    Int
  social    Int
  transport Int
  travail   Int
  logement  Int

  // If we have detected an error in the data (e.g. not found in carto nationale) we store the error here
  errors Json?

  @@index([structureCartographieNationaleId])
  @@map("structures_aidants_connect")
}

model PermanenceConseillerNumerique {
  id String @id

  structureCartographieNationaleId String?                           @unique @map("structure_cartographie_nationale_id")
  structureCartographieNationale   StructureCartographieNationale?   @relation(fields: [structureCartographieNationaleId], references: [id])
  enPermanence                     ConseillerNumeriqueEnPermanence[]

  // If we have detected an error in the data (e.g. not found in carto nationale) we store the error here
  errors Json?

  @@index([structureCartographieNationaleId])
  @@map("permanences_conseiller_numerique")
}

// Explicit many to many table between PermanenceConseillerNumerique and ConseillerNumerique
model ConseillerNumeriqueEnPermanence {
  permanenceId String                        @map("permanence_id")
  permanence   PermanenceConseillerNumerique @relation(fields: [permanenceId], references: [id])

  conseillerNumeriqueId String              @map("conseiller_numerique_id")
  conseillerNumerique   ConseillerNumerique @relation(fields: [conseillerNumeriqueId], references: [id])

  @@id([permanenceId, conseillerNumeriqueId])
  @@index([conseillerNumeriqueId])
  @@index([permanenceId])
  @@map("conseillers_numeriques_en_permanence")
}

model CoordinateurConseillerNumerique {
  id                               String      @id
  codeDepartement                  String      @map("code_departement")
  departement                      Departement @relation(fields: [codeDepartement], references: [code])
  conseillersNumeriquesCoordonnees Int         @map("conseillers_numeriques_coordonnees")
  structuresCoordonnees            Int         @map("structures_coordonnees")

  @@map("coordinateur_conseiller_numerique")
}

model ConseillerNumerique {
  id String @id

  enPermanence ConseillerNumeriqueEnPermanence[]

  @@map("conseiller_numerique")
}

model CraConseillerNumeriqueParDepartement {
  codeDepartement String      @id @unique @map("code_repartement")
  departement     Departement @relation(fields: [codeDepartement], references: [code])

  // Nombre de participants uniques
  usagers Int

  // Nombre d'accompagnements r√©alis√©s
  accompagnements Int

  ageMoins12ans Int @map("age_moins_12_ans")
  age12a18ans   Int @map("age_12_a_18_ans")
  age18a35ans   Int @map("age_18_a_35_ans")
  age35a60ans   Int @map("age_35_a_60_ans")
  agePlus60ans  Int @map("age_plus_60_ans")

  statutEtudiant   Int @map("statut_etudiant")
  statutSansEmploi Int @map("statut_sans_emploi")
  statutEnEmploi   Int @map("statut_en_emploi")
  statutRetraite   Int @map("statut_retraite")
  statutHeterogene Int @map("statut_heterogene")

  accompagnementIndividuel  Int @map("accompagnement_individuel")
  accompagnementAtelier     Int @map("accompagnement_atelier")
  accompagnementRedirection Int @map("accompagnement_redirection")

  activiteCollectif  Int @map("activite_collectif")
  activitePonctuel   Int @map("activite_ponctuel")
  activiteIndividuel Int @map("activite_individuel")

  themeAutre                  Int @map("theme_autre")
  themeEquipementInformatique Int @map("theme_equipement_informatique")
  themeDemarcheEnLigne        Int @map("theme_demarche_en_ligne")
  themeSmartphone             Int @map("theme_smartphone")
  themeCourriel               Int @map("theme_courriel")
  themeInternet               Int @map("theme_internet")
  themeVocabulaire            Int @map("theme_vocabulaire")
  themeTraitementTexte        Int @map("theme_traitement_texte")
  themeContenusNumeriques     Int @map("theme_contenus_numeriques")
  themeTrouverEmploi          Int @map("theme_trouver_emploi")
  themeEchanger               Int @map("theme_echanger")
  themeTpePme                 Int @map("theme_tpe_pme")
  themeAccompagnerEnfant      Int @map("theme_accompagner_enfant")
  themeSecurite               Int @map("theme_securite")
  themeFraudeEtHarcelement    Int @map("theme_fraude_et_harcelement")
  themeSante                  Int @map("theme_sante")
  themeDiagnostic             Int @map("theme_diagnostic")
  themeBudget                 Int @map("theme_budget")
  themeScolaire               Int @map("theme_scolaire")

  @@map("cra_conseiller_numerique_par_departement")
}

model IfnEpci {
  codeEpci String @id @unique @map("code_epci")
  epci     Epci   @relation(fields: [codeEpci], references: [code], onDelete: Cascade)

  total Float

  // Non couverture 4G
  no4gCoverageRate Float @map("no_4g_coverage_rate")

  // Non couverture fibre
  noThdCoverageRate Float @map("no_thd_coverage_rate")

  // Taux de pauvret√©
  povertyRate Float @map("poverty_rate")

  // Taux de personnes √¢g√©es de 65 ans ou plus
  older65Rate Float @map("older_65_rate")

  // Taux de personnes sans dipl√¥me
  nscol15pRate Float @map("nscol15p_rate")

  @@map("ifn_epci")
}

model IfnCommune {
  codeCommune String  @id @unique @map("code_commune")
  commune     Commune @relation(fields: [codeCommune], references: [code], onDelete: Cascade)

  total Float

  // Non couverture 4G
  no4gCoverageRate Float @map("no_4g_coverage_rate")

  // Non couverture fibre
  noThdCoverageRate Float @map("no_thd_coverage_rate")

  // Taux de pauvret√©
  povertyRate Float @map("poverty_rate")

  // Taux de personnes √¢g√©es de 65 ans ou plus
  older65Rate Float @map("older_65_rate")

  // Taux de personnes sans dipl√¥me
  nscol15pRate Float @map("nscol15p_rate")

  @@map("ifn_commune")
}

model FormulaireGouvernance {
  id                 String @id @default(uuid()) @db.Uuid
  gouvernancePersona String @map("gouvernance_persona")

  participants User[] @relation("formulaire_gouvernance_participant")

  createurId String @map("createur_id") @db.Uuid
  createur   User   @relation("formulaire_gouvernance_createur", fields: [createurId], references: [id])

  modification DateTime @updatedAt
  creation     DateTime @default(now())

  @@map("formulaire_gouvernance")
}
