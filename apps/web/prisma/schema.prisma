generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "jsonProtocol", "postgresqlExtensions", "extendedIndexes"]
  binaryTargets   = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Account, Session, User and VerificationToken
// Match next-auth model https://next-auth.js.org/adapters/prisma
// Underscored names are from there too
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id") @db.Uuid
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum UserRole {
  Administrator
  Demo
  Prefect
  User
}

model User {
  id            String    @id @default(uuid()) @db.Uuid
  legacyId      Int?      @unique @map("legacy_id")
  firstName     String?   @map("first_name")
  lastName      String?   @map("last_name")
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         Image?    @relation(fields: [imageId], references: [id])
  imageId       String?   @unique @map("image_id") @db.Uuid
  location      String?
  title         String?
  description   String?
  role          UserRole  @default(User)
  // Scope of the user used for access control (e.g. prefects can only access their own county, it will be countyCode)
  roleScope     String?
  accounts      Account[]
  sessions      Session[]

  monCompteProOrganizations Json? @map("mon_compte_pro_organizations")

  created DateTime @default(now())
  updated DateTime @default(now())

  uploads Upload[]

  organizations UserOrganization[] @relation(name: "user_organizations")

  @@map("users")
}

// From MonComptePro. We store them to easily debug / Monitor who has access to what
model UserOrganization {
  monCompteProId Int    @id @map("mon_compte_pro_id")
  users          User[] @relation(name: "user_organizations")

  // Raw data from Mon Compte Pro
  is_collectivite_territoriale Boolean
  is_external                  Boolean
  is_service_public            Boolean
  // e.g. 'Commune de les martres sur morge - Mairie'
  label                        String
  siret                        String

  // Our data
  prefectureCheckedAt     DateTime? @map("prefecture_checked_at")
  isDepartementPrefecture String?   @map("is_departement_prefecture")

  @@map("user_organizations")
}

model VerificationToken {
  token      String   @id
  identifier String // Email or other user identifier
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Image {
  id       String @id @default(uuid()) @db.Uuid
  legacyId Int?   @unique @map("legacy_id")

  altText String? @map("alt_text")

  blurUrl String? @map("blur_url")

  // Original dimensions in pixel (before cropping)
  originalHeight Int? @map("original_heigth")
  originalWidth  Int? @map("original_width")

  // Relative height crop (0-1)
  cropHeight Float @default(1) @map("crop_height")
  // Relative width crop
  cropWidth  Float @default(1) @map("crop_width")
  // Relative top crop
  cropTop    Float @default(0) @map("crop_top")
  // Relative left crop
  cropLeft   Float @default(0) @map("crop_left")

  // Cropped dimensions in pixels
  height Int?
  width  Int?

  upload    Upload @relation(fields: [uploadKey], references: [key])
  uploadKey String @unique @map("upload_key")
  user      User?

  @@map("images")
}

model Upload {
  key       String  @id
  legacyKey String? @unique @map("legacy_key")
  mimeType  String  @map("mime_type")
  name      String

  // Size in bytes
  size Int?

  uploadedBy   User?   @relation(fields: [uploadedById], references: [id])
  uploadedById String? @map("uploaded_by_id") @db.Uuid

  created DateTime @default(now())

  // Is an image
  image Image?

  @@map("uploads")
}

model Region {
  // INSEE
  code         String        @id
  nom          String
  departements Departement[]

  @@map("regions")
}

model Epci {
  // INSEE
  code       String    @id
  nom        String
  communes   Commune[]
  geometry   Json?
  population Int

  @@map("epcis")
}

model Departement {
  // INSEE
  code                           String                           @id
  nom                            String
  codeRegion                     String?                          @map("code_region")
  region                         Region?                          @relation(fields: [codeRegion], references: [code])
  communes                       Commune[]
  geometry                       Json?
  structureCartographieNationale StructureCartographieNationale[]

  @@map("departements")
}

model Commune {
  code        String        @id
  nom         String
  codePostaux CodePostaux[]

  codeDepartement String?      @map("code_departement")
  departement     Departement? @relation(fields: [codeDepartement], references: [code])

  population Int

  codeEpci String? @map("code_epci")
  epci     Epci?   @relation(fields: [codeEpci], references: [code])

  latitude  Float?
  longitude Float?

  geometry Json?

  structuresCartographieNationale StructureCartographieNationale[]

  @@index([codeDepartement])
  @@index([codeEpci])
  @@map("communes")
}

// Explicit many to many table between Commune and CodePostal
model CodePostaux {
  code       String
  codePostal CodePostal @relation(fields: [code], references: [code])

  codeCommune String  @map("code_commune")
  commune     Commune @relation(fields: [codeCommune], references: [code], onDelete: Cascade)

  @@id([code, codeCommune])
  @@map("code_postaux")
}

// Normalized for easier search with o(1) instead of string[] in Communes
model CodePostal {
  code        String        @id
  codePostaux CodePostaux[]

  @@map("code_postal")
}

model StructureCartographieNationale {
  id    String @id
  nom   String
  siret String

  type           String
  sousTypePublic String?

  // Bad data in, bad data out. Missing communes are frequent
  codeCommune String?  @map("code_commune")
  commune     Commune? @relation(fields: [codeCommune], references: [code])

  // As data is really bad, as a fallback we need to store the departement code when postal code / name has a typo and no codeCommune is found
  codeDepartement String?      @map("code_repartement")
  departement     Departement? @relation(fields: [codeDepartement], references: [code])

  adresse String
  source  String

  updatedAt DateTime @map("updated_at")

  latitude  Float?
  longitude Float?

  labelConseillersNumerique Boolean
  labelFranceServices       Boolean
  labelAidantsConnect       Boolean

  structureAidantsConnect StructureAidantsConnect?

  permanenceConseillerNumerique PermanenceConseillerNumerique?

  // If we have detected an error in the data (e.g. invalid postal code / commune name) we store the error here
  errors Json?

  @@map("structures_cartographie_nationale")
}

model StructureAidantsConnect {
  id String @id

  structureCartographieNationaleId String?                         @unique @map("structure_cartographie_nationale_id")
  structureCartographieNationale   StructureCartographieNationale? @relation(fields: [structureCartographieNationaleId], references: [id])

  isActive Boolean

  aidants        Int
  usagersUniques Int

  totalDemarches Int

  // Nombre de d√©marches (smaller names for easier data transfer)
  argent    Int
  etranger  Int
  famille   Int
  justice   Int
  loisirs   Int
  papier    Int
  social    Int
  transport Int
  travail   Int
  logement  Int

  // If we have detected an error in the data (e.g. not found in carto nationale) we store the error here
  errors Json?

  @@index([structureCartographieNationaleId])
  @@map("structures_aidants_connect")
}

model PermanenceConseillerNumerique {
  id String @id

  structureCartographieNationaleId String?                         @unique @map("structure_cartographie_nationale_id")
  structureCartographieNationale   StructureCartographieNationale? @relation(fields: [structureCartographieNationaleId], references: [id])

  @@index([structureCartographieNationaleId])
  @@map("permanences_conseiller_numerique")
}
