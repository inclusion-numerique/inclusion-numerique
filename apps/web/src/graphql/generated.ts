/* eslint unicorn/prevent-abbreviations: 0, @typescript-eslint/no-explicit-any:0 */

/**
 * ⚠️ DO NOT EDIT ⚠️
 * @file This file is generated by graphql-codegen, do not edit. To regenerate run pnpm -F web graphql:codegen
 * @see https://graphql-code-generator.com/
 */

import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core'

export type Maybe<T> = T | null
export type InputMaybe<T> = Maybe<T>
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K]
}
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>
}
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>
}
export type MakeEmpty<
  T extends { [key: string]: unknown },
  K extends keyof T,
> = { [_ in K]?: never }
export type Incremental<T> =
  | T
  | {
      [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never
    }
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string }
  String: { input: string; output: string }
  Boolean: { input: boolean; output: boolean }
  Int: { input: number; output: number }
  Float: { input: number; output: number }
  DateTime: { input: any; output: any }
  JSON: { input: any; output: any }
}

export type Dataset = {
  __typename?: 'Dataset'
  description?: Maybe<Scalars['String']['output']>
  lastImport?: Maybe<Scalars['DateTime']['output']>
  lastModified?: Maybe<Scalars['DateTime']['output']>
  maintainer?: Maybe<Scalars['String']['output']>
  name: Scalars['String']['output']
  needsUpdate?: Maybe<Scalars['Boolean']['output']>
  nextExpectedUpdate?: Maybe<Scalars['DateTime']['output']>
  producer?: Maybe<Producer>
  table: Scalars['String']['output']
  updateFrequency?: Maybe<Scalars['String']['output']>
}

export type DefinitionIndicateur = {
  __typename?: 'DefinitionIndicateur'
  categorie?: Maybe<Scalars['String']['output']>
  datasets: Array<Dataset>
  description?: Maybe<Scalars['String']['output']>
  identifiant?: Maybe<Scalars['String']['output']>
  nom?: Maybe<Scalars['String']['output']>
  recette: Scalars['JSON']['output']
  schema?: Maybe<Scalars['JSON']['output']>
  unite?: Maybe<Scalars['String']['output']>
}

export type IndicateurCalcule = {
  __typename?: 'IndicateurCalcule'
  code: Scalars['String']['output']
  metadata: DefinitionIndicateur
  ratiosMaillesSuperieures: Scalars['JSON']['output']
  valeur?: Maybe<Scalars['JSON']['output']>
  valeursMaillesSuperieures: Scalars['JSON']['output']
}

export type Indicateurs = {
  __typename?: 'Indicateurs'
  code: Scalars['String']['output']
  indicateur: IndicateurCalcule
  maille: Scalars['String']['output']
}

export type IndicateursIndicateurArgs = {
  identifiant?: InputMaybe<Scalars['String']['input']>
  namespace?: InputMaybe<Scalars['String']['input']>
}

export type Maille = {
  __typename?: 'Maille'
  code: Scalars['String']['output']
  indicateurs: Indicateurs
  libelle: Scalars['String']['output']
  maille: Scalars['String']['output']
}

export type Mailles = {
  __typename?: 'Mailles'
  departements: Array<Maille>
  pays: Array<Maille>
  regions: Array<Maille>
}

export type Producer = {
  __typename?: 'Producer'
  name?: Maybe<Scalars['String']['output']>
  url?: Maybe<Scalars['String']['output']>
}

export type Query = {
  __typename?: 'Query'
  departement: Maille
  indicateurs: Array<DefinitionIndicateur>
  mailles: Mailles
  region: Maille
}

export type QueryDepartementArgs = {
  code: Scalars['ID']['input']
}

export type QueryRegionArgs = {
  code: Scalars['ID']['input']
}

export type GetDepartementQueryVariables = Exact<{
  code: Scalars['ID']['input']
}>

export type GetDepartementQuery = {
  __typename?: 'Query'
  departement: {
    __typename?: 'Maille'
    code: string
    libelle: string
    indicateurs: { __typename: 'Indicateurs' }
  }
}

export const GetDepartementDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'getDepartement' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'code' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'departement' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'code' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'code' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'code' } },
                { kind: 'Field', name: { kind: 'Name', value: 'libelle' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'indicateurs' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: '__typename' },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<GetDepartementQuery, GetDepartementQueryVariables>
